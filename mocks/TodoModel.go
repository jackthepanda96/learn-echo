// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	todo "21-api/features/todo"

	mock "github.com/stretchr/testify/mock"
)

// TodoModel is an autogenerated mock type for the TodoModel type
type TodoModel struct {
	mock.Mock
}

// GetTodoByOwner provides a mock function with given fields: pemilik
func (_m *TodoModel) GetTodoByOwner(pemilik string) ([]todo.Todo, error) {
	ret := _m.Called(pemilik)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoByOwner")
	}

	var r0 []todo.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]todo.Todo, error)); ok {
		return rf(pemilik)
	}
	if rf, ok := ret.Get(0).(func(string) []todo.Todo); ok {
		r0 = rf(pemilik)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todo.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pemilik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTodo provides a mock function with given fields: pemilik, kegiatanBaru
func (_m *TodoModel) InsertTodo(pemilik string, kegiatanBaru todo.Todo) (todo.Todo, error) {
	ret := _m.Called(pemilik, kegiatanBaru)

	if len(ret) == 0 {
		panic("no return value specified for InsertTodo")
	}

	var r0 todo.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, todo.Todo) (todo.Todo, error)); ok {
		return rf(pemilik, kegiatanBaru)
	}
	if rf, ok := ret.Get(0).(func(string, todo.Todo) todo.Todo); ok {
		r0 = rf(pemilik, kegiatanBaru)
	} else {
		r0 = ret.Get(0).(todo.Todo)
	}

	if rf, ok := ret.Get(1).(func(string, todo.Todo) error); ok {
		r1 = rf(pemilik, kegiatanBaru)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: pemilik, todoID, data
func (_m *TodoModel) UpdateTodo(pemilik string, todoID uint, data todo.Todo) (todo.Todo, error) {
	ret := _m.Called(pemilik, todoID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 todo.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint, todo.Todo) (todo.Todo, error)); ok {
		return rf(pemilik, todoID, data)
	}
	if rf, ok := ret.Get(0).(func(string, uint, todo.Todo) todo.Todo); ok {
		r0 = rf(pemilik, todoID, data)
	} else {
		r0 = ret.Get(0).(todo.Todo)
	}

	if rf, ok := ret.Get(1).(func(string, uint, todo.Todo) error); ok {
		r1 = rf(pemilik, todoID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoModel creates a new instance of TodoModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoModel {
	mock := &TodoModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
