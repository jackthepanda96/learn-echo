// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	user "21-api/features/user"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Login provides a mock function with given fields: loginData
func (_m *UserService) Login(loginData user.User) (user.User, string, error) {
	ret := _m.Called(loginData)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 user.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(user.User) (user.User, string, error)); ok {
		return rf(loginData)
	}
	if rf, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = rf(loginData)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(user.User) string); ok {
		r1 = rf(loginData)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(user.User) error); ok {
		r2 = rf(loginData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Profile provides a mock function with given fields: token
func (_m *UserService) Profile(token *jwt.Token) (user.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Profile")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token) (user.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) user.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newData
func (_m *UserService) Register(newData user.User) error {
	ret := _m.Called(newData)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(user.User) error); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
